// GFG problem link :-> https://www.geeksforgeeks.org/problems/inversion-of-array-1587115620/1

// Approach : Using merge sort we can find how many inversion(swap) required to sort the array.
Time Complexity : O(nlogn) || Space Complexity : O(n)

// # Code
class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    static long inversionCount(long a[], long n)
    {
        // Base case
        if (n <= 1) return 0;

        return mergeSort(a, 0, n-1, 0);
    }
    
    static long mergeSort(long a[], long l, long r, long ans) {
        if (l < r) {
            long m = (l+r) / 2;
            ans = mergeSort(a, l, m, ans);
            ans = mergeSort(a, m+1, r, ans);
            ans += merge(a, (int)l, (int)m, (int)r);
        }
        return ans;
    }
    
    static long merge(long a[], int l, int m, int r) {
     int n1 = m - l +1;
     int n2 = r - m;
     
     long left[] = new long[n1];
     long right[] = new long[n2];
     
     for (int i = 0; i < n1; i++) {
         left[i] = a[i+l];
     }
          
     for (int i = 0; i < n2; i++) {
         right[i] = a[i+m+1];
     }
     
     int i = 0, j = 0;
     long ans = 0;
     while (i < n1 && j < n2) {
         if (left[i] <= right[j]) {
             a[l] = left[i++];
         } else {
             a[l] = right[j++];
             ans += n1 - i;
         }
         l++;
     }
     if (i < n1) {
         while (i < n1) a[l++] = left[i++];
     }
     
     return ans;
    }
}
